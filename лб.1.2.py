# Функция для преобразования числа (в виде строки) в слова на русском языке
def number_to_words(number):
    # Словарь, где ключи — символы (цифры и буквы шестнадцатеричной системы),
    # а значения — их словесные эквиваленты на русском языке
    digits = {
        '0': 'ноль', '1': 'один', '2': 'два', '3': 'три', '4': 'четыре',
        '5': 'пять', '6': 'шесть', '7': 'семь', '8': 'восемь', '9': 'девять',
        'A': 'А', 'B': 'Б', 'C': 'С', 'D': 'Д', 'E': 'Е', 'F': 'Ф'
    }
    # Преобразуем каждый символ числа в слово и объединяем их через пробел
    return ' '.join(digits[digit] for digit in number)

# Функция для проверки, является ли токен допустимым шестнадцатеричным числом
def is_valid_hex_number(token):
    try:
        # Преобразуем токен из шестнадцатеричной системы в десятичную
        decimal_value = int(token, 16)
        # Проверяем, что число четное и не превышает 2047
        return decimal_value % 2 == 0 and decimal_value <= 2047
    except ValueError:
        # Если токен не является шестнадцатеричным числом, возвращаем False
        return False

# Основная функция для обработки файла
def process_file(file_path):
    # Список для хранения подходящих шестнадцатеричных чисел
    hex_numbers = []
    try:
        # Открываем файл для чтения
        with open(file_path, 'r') as file:
            # Читаем файл построчно
            for line in file:
                # Разбиваем строку на токены (слова)
                tokens = line.split()
                # Обрабатываем каждый токен
                for token in tokens:
                    # Проверяем, что токен длиннее 2 символов и является допустимым числом
                    if len(token) > 2 and is_valid_hex_number(token):
                        # Если токен подходит, добавляем его в список
                        hex_numbers.append(token)
    except FileNotFoundError:
        # Если файл не найден, выводим сообщение об ошибке и завершаем функцию
        print(f"Файл {file_path} не найден.")
        return
    except IOError:
        # Если произошла ошибка ввода-вывода, выводим сообщение и завершаем функцию
        print(f"Ошибка при чтении файла {file_path}.")
        return

    # Если найдены подходящие числа
    if hex_numbers:
        # Находим максимальное число в списке (по десятичному значению)
        max_hex = max(hex_numbers, key=lambda x: int(x, 16))
        # Преобразуем максимальное число в десятичное
        max_decimal = int(max_hex, 16)
        # Выводим все подходящие числа
        print(f"Числа: {', '.join(hex_numbers)}")
        # Выводим количество подходящих чисел
        print(f"Количество: {len(hex_numbers)}")
        # Выводим максимальное число в десятичной системе и его словесное представление
        print(f"Максимальное число ({max_decimal} в десятичной): {number_to_words(max_hex)}")
    else:
        # Если подходящих чисел нет, выводим сообщение
        print("Нет подходящих чисел.")

#  Использования функции process_file
process_file('input.txt')